{"ast":null,"code":"var _jsxFileName = \"/Users/niwa_kazuhiro/Documents/PrivateDevelop/win-rate-react19/src/SubmitForm.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport { useOptimistic, useState, useRef } from \"react\";\nimport { useFormStatus } from \"react-dom\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction UserNameSubmitForm() {\n  _s();\n  const {\n    pending,\n    data\n  } = useFormStatus();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: pending ? `Submitting ${data === null || data === void 0 ? void 0 : data.get(\"name\")}...` : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n}\n\n// deliverName関数の引数と戻り値の型を定義\n_s(UserNameSubmitForm, \"J/2Wr/H+PRkFQJ5+36sW4Xec7aE=\", false, function () {\n  return [useFormStatus];\n});\n_c = UserNameSubmitForm;\nasync function deliverName(name) {\n  await new Promise(res => setTimeout(res, 1000)); // 1秒待機して名前を返す\n  return name;\n}\n\n// Threadコンポーネントのpropsに型を追加\n\nfunction Thread({\n  names,\n  sendName\n}) {\n  _s2();\n  const formRef = useRef(null);\n\n  // formActionの引数の型をFormDataに設定\n  async function formAction(formData) {\n    var _formRef$current;\n    const newName = formData.get(\"name\");\n    addOptimisticName(newName); // 名前を文字列としてoptimisticに追加\n    (_formRef$current = formRef.current) === null || _formRef$current === void 0 ? void 0 : _formRef$current.reset();\n    await sendName(formData); // 名前を送信\n  }\n\n  // optimisticNamesとaddOptimisticNameに型を付ける\n  const [optimisticNames, addOptimisticName] = useOptimistic(names, (state, newName) => [...state, {\n    text: newName,\n    sending: true\n  }]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [optimisticNames.map((name, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [name.text, !!name.sending && /*#__PURE__*/_jsxDEV(UserNameSubmitForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 30\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"form\", {\n      action: formAction,\n      ref: formRef,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"name\",\n        placeholder: \"Hello!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: optimisticNames.some(name => name.sending),\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n// SubmitForm コンポーネントのstateとsendName関数の型を追加\n_s2(Thread, \"vsyMHlx8E0bi7/LCNRey0yO3QRY=\", false, function () {\n  return [useOptimistic];\n});\n_c2 = Thread;\nexport function SubmitForm() {\n  _s3();\n  const [names, setNames] = useState([{\n    text: \"Hello there!\",\n    sending: false,\n    key: 1\n  }]);\n  async function sendName(formData) {\n    const sentName = await deliverName(formData.get(\"name\"));\n    setNames(names => [...names, {\n      text: sentName,\n      sending: false,\n      key: names.length + 1\n    }]);\n  }\n  return /*#__PURE__*/_jsxDEV(Thread, {\n    names: names,\n    sendName: sendName\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 10\n  }, this);\n}\n_s3(SubmitForm, \"h+Lhhp2HsAgcHBBlQNyEvd9SWBw=\");\n_c3 = SubmitForm;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"UserNameSubmitForm\");\n$RefreshReg$(_c2, \"Thread\");\n$RefreshReg$(_c3, \"SubmitForm\");","map":{"version":3,"names":["useOptimistic","useState","useRef","useFormStatus","jsxDEV","_jsxDEV","Fragment","_Fragment","UserNameSubmitForm","_s","pending","data","children","get","fileName","_jsxFileName","lineNumber","columnNumber","_c","deliverName","name","Promise","res","setTimeout","Thread","names","sendName","_s2","formRef","formAction","formData","_formRef$current","newName","addOptimisticName","current","reset","optimisticNames","state","text","sending","map","index","action","ref","type","placeholder","disabled","some","_c2","SubmitForm","_s3","setNames","key","sentName","length","_c3","$RefreshReg$"],"sources":["/Users/niwa_kazuhiro/Documents/PrivateDevelop/win-rate-react19/src/SubmitForm.tsx"],"sourcesContent":["import { useOptimistic, useState, useRef } from \"react\";\nimport { useFormStatus } from \"react-dom\";\n\nfunction UserNameSubmitForm() {\n  const { pending, data } = useFormStatus();\n\n  return (\n    <div>\n      <p>{pending ? `Submitting ${data?.get(\"name\")}...` : \"\"}</p> {/* Pending時に送信中メッセージを表示 */}\n    </div>\n  );\n}\n\n// deliverName関数の引数と戻り値の型を定義\nasync function deliverName(name: string): Promise<string> {\n  await new Promise((res) => setTimeout(res, 1000)); // 1秒待機して名前を返す\n  return name;\n}\n\n// Threadコンポーネントのpropsに型を追加\ninterface NameItem {\n  text: string;\n  sending: boolean;\n  key?: number;\n}\n\ninterface ThreadProps {\n  names: NameItem[];\n  sendName: (formData: FormData) => Promise<void>;\n}\n\nfunction Thread({ names, sendName }: ThreadProps) {\n  const formRef = useRef<HTMLFormElement | null>(null);\n\n  // formActionの引数の型をFormDataに設定\n  async function formAction(formData: FormData): Promise<void> {\n    const newName = formData.get(\"name\") as string;\n    addOptimisticName(newName); // 名前を文字列としてoptimisticに追加\n    formRef.current?.reset();\n    await sendName(formData); // 名前を送信\n  }\n\n  // optimisticNamesとaddOptimisticNameに型を付ける\n  const [optimisticNames, addOptimisticName] = useOptimistic<NameItem[], string>(\n    names,\n    (state, newName) => [\n      ...state,\n      {\n        text: newName,\n        sending: true,\n      },\n    ]\n  );\n\n  return (\n    <>\n      {optimisticNames.map((name, index) => (\n        <div key={index}>\n          {name.text}\n          {!!name.sending && <UserNameSubmitForm  />}\n        </div>\n      ))}\n      <form action={formAction} ref={formRef}>\n        <input type=\"text\" name=\"name\" placeholder=\"Hello!\" />\n        <button type=\"submit\" disabled={optimisticNames.some((name) => name.sending)}>\n          Send\n        </button>\n      </form>\n    </>\n  );\n}\n\n// SubmitForm コンポーネントのstateとsendName関数の型を追加\nexport function SubmitForm() {\n  const [names, setNames] = useState<NameItem[]>([\n    { text: \"Hello there!\", sending: false, key: 1 },\n  ]);\n\n  async function sendName(formData: FormData): Promise<void> {\n    const sentName = await deliverName(formData.get(\"name\") as string);\n    setNames((names) => [\n      ...names,\n      { text: sentName, sending: false, key: names.length + 1 },\n    ]);\n  }\n\n  return <Thread names={names} sendName={sendName} />;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}