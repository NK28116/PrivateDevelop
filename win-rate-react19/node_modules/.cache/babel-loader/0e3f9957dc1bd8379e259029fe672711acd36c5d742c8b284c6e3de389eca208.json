{"ast":null,"code":"var _jsxFileName = \"/Users/niwa_kazuhiro/Documents/PrivateDevelop/win-rate-react19/src/SubmitForm.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useOptimistic, useState, useRef } from \"react\";\n\n// deliverName関数の引数と戻り値の型を定義\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport async function deliverName(name) {\n  console.log(typeof name);\n  await new Promise(res => setTimeout(res, 1000));\n  return name;\n}\n\n// Threadコンポーネントのpropsに型を追加\n\nfunction Thread({\n  names,\n  sendName\n}) {\n  _s();\n  const formRef = useRef(null);\n\n  // formActionの引数の型をFormDataに設定\n  async function formAction(formData) {\n    var _formRef$current;\n    console.log(typeof formData);\n    addOptimisticName(formData.get(\"name\")); // 名前を文字列として扱う\n    (_formRef$current = formRef.current) === null || _formRef$current === void 0 ? void 0 : _formRef$current.reset();\n    await sendName(formData);\n  }\n\n  // optimisticNamesとaddOptimisticNameに型を付ける\n  const [optimisticNames, addOptimisticName] = useOptimistic(names, (state, newName) => [...state, {\n    text: newName,\n    sending: true\n  }]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [optimisticNames.map((name, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [name.text, !!name.sending && /*#__PURE__*/_jsxDEV(\"small\", {\n        children: \" (Sending...)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 30\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"form\", {\n      action: formAction,\n      ref: formRef,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"name\",\n        placeholder: \"Hello!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n// SubmitForm  コンポーネントのstateとsendName関数の型を追加\n_s(Thread, \"vsyMHlx8E0bi7/LCNRey0yO3QRY=\", false, function () {\n  return [useOptimistic];\n});\n_c = Thread;\nexport function SubmitForm() {\n  _s2();\n  const [names, setNames] = useState([{\n    text: \"Hello there!\",\n    sending: false,\n    key: 1\n  }]);\n  async function sendName(formData) {\n    const sentName = await deliverName(formData.get(\"name\"));\n    setNames(names => [...names, {\n      text: sentName,\n      sending: false\n    }]);\n  }\n  return /*#__PURE__*/_jsxDEV(Thread, {\n    names: names,\n    sendName: sendName\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 10\n  }, this);\n}\n_s2(SubmitForm, \"h+Lhhp2HsAgcHBBlQNyEvd9SWBw=\");\n_c2 = SubmitForm;\nvar _c, _c2;\n$RefreshReg$(_c, \"Thread\");\n$RefreshReg$(_c2, \"SubmitForm\");","map":{"version":3,"names":["useOptimistic","useState","useRef","jsxDEV","_jsxDEV","Fragment","_Fragment","deliverName","name","console","log","Promise","res","setTimeout","Thread","names","sendName","_s","formRef","formAction","formData","_formRef$current","addOptimisticName","get","current","reset","optimisticNames","state","newName","text","sending","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","action","ref","type","placeholder","_c","SubmitForm","_s2","setNames","key","sentName","_c2","$RefreshReg$"],"sources":["/Users/niwa_kazuhiro/Documents/PrivateDevelop/win-rate-react19/src/SubmitForm.tsx"],"sourcesContent":["import { useOptimistic, useState, useRef, FormEvent } from \"react\";\n\n// deliverName関数の引数と戻り値の型を定義\nexport async function deliverName(name: string): Promise<string> {\n  console.log(typeof name);\n  await new Promise((res) => setTimeout(res, 1000));\n  return name;\n}\n\n// Threadコンポーネントのpropsに型を追加\ninterface NameItem {\n  text: string;\n  sending: boolean;\n  key?: number; // key はReact が自動的に生成するので、必須ではない\n}\n\ninterface ThreadProps {\n  names: NameItem[];\n  sendName: (formData: FormData) => Promise<void>;\n}\n\nfunction Thread({ names, sendName }: ThreadProps) {\n  const formRef = useRef<HTMLFormElement | null>(null);\n\n  // formActionの引数の型をFormDataに設定\n  async function formAction(formData: FormData): Promise<void> {\n    console.log(typeof formData);\n    addOptimisticName(formData.get(\"name\") as string); // 名前を文字列として扱う\n    formRef.current?.reset();\n    await sendName(formData);\n  }\n\n  // optimisticNamesとaddOptimisticNameに型を付ける\n  const [optimisticNames, addOptimisticName] = useOptimistic<NameItem[], string>(\n    names,\n    (state, newName) => [\n      ...state,\n      {\n        text: newName,\n        sending: true,\n      },\n    ]\n  );\n\n  return (\n    <>\n      {optimisticNames.map((name, index) => (\n        <div key={index}>\n          {name.text}\n          {!!name.sending && <small> (Sending...)</small>}\n        </div>\n      ))}\n      <form action={formAction} ref={formRef}>\n        <input type=\"text\" name=\"name\" placeholder=\"Hello!\" />\n        <button type=\"submit\">Send</button>\n      </form>\n    </>\n  );\n}\n\n// SubmitForm  コンポーネントのstateとsendName関数の型を追加\nexport  function SubmitForm() {\n  const [names, setNames] = useState<NameItem[]>([\n    { text: \"Hello there!\", sending: false, key: 1 },\n  ]);\n\n  async function sendName(formData: FormData): Promise<void> {\n    const sentName = await deliverName(formData.get(\"name\") as string);\n    setNames((names) => [...names, { text: sentName, sending: false }]);\n  }\n\n  return <Thread names={names} sendName={sendName} />;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}