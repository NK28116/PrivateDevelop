{"ast":null,"code":"var _jsxFileName = \"/Users/niwa_kazuhiro/Documents/PrivateDevelop/win-rate-react19/src/SubmitForm.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport { useOptimistic, useState, useRef } from \"react\";\nimport { useFormStatus } from \"react-dom\";\n\n///placeHolder付き\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction SubmitNamePlaceHolder() {\n  _s();\n  const {\n    pending,\n    data\n  } = useFormStatus();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: pending ? \"Submitting...\" : \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: data ? `Submitting ${data === null || data === void 0 ? void 0 : data.get(\"name\")}...` : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }, this);\n}\n\n// deliverName関数の引数と戻り値の型を定義\n_s(SubmitNamePlaceHolder, \"J/2Wr/H+PRkFQJ5+36sW4Xec7aE=\", false, function () {\n  return [useFormStatus];\n});\n_c = SubmitNamePlaceHolder;\nasync function deliverName(name) {\n  await new Promise(res => setTimeout(res, 1000));\n  return name;\n}\n\n// Threadコンポーネントのpropsに型を追加\n\nfunction Thread({\n  names,\n  sendName\n}) {\n  _s2();\n  const formRef = useRef(null);\n\n  // formActionの引数の型をFormDataに設定\n  async function formAction(formData) {\n    var _formRef$current;\n    addOptimisticName(formData.get(\"name\")); // 名前を文字列として扱う\n    (_formRef$current = formRef.current) === null || _formRef$current === void 0 ? void 0 : _formRef$current.reset();\n    await sendName(formData);\n  }\n\n  // optimisticNamesとaddOptimisticNameに型を付ける\n  const [optimisticNames, addOptimisticName] = useOptimistic(names, (state, newName) => [...state, {\n    text: newName,\n    sending: true\n  }]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      action: formAction,\n      ref: formRef,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"name\",\n        placeholder: \"Your Name!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SubmitNamePlaceHolder, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), optimisticNames.map((name, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: name.text\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 15\n    }, this))]\n  }, void 0, true);\n}\n\n// AppコンポーネントのstateとsendName関数の型を追加\n_s2(Thread, \"vsyMHlx8E0bi7/LCNRey0yO3QRY=\", false, function () {\n  return [useOptimistic];\n});\n_c2 = Thread;\nexport function SubmitForm() {\n  _s3();\n  const [names, setNames] = useState([{\n    text: \"\",\n    sending: false,\n    key: 1\n  }]);\n  async function sendName(formData) {\n    const sentName = await deliverName(formData.get(\"name\"));\n    setNames(names => [...names, {\n      text: sentName,\n      sending: false\n    }]);\n  }\n  return /*#__PURE__*/_jsxDEV(Thread, {\n    names: names,\n    sendName: sendName\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 7\n  }, this);\n}\n_s3(SubmitForm, \"vWLEVJzfLWVfiZW6jRczJExdvW4=\");\n_c3 = SubmitForm;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"SubmitNamePlaceHolder\");\n$RefreshReg$(_c2, \"Thread\");\n$RefreshReg$(_c3, \"SubmitForm\");","map":{"version":3,"names":["useOptimistic","useState","useRef","useFormStatus","jsxDEV","_jsxDEV","Fragment","_Fragment","SubmitNamePlaceHolder","_s","pending","data","children","fileName","_jsxFileName","lineNumber","columnNumber","get","_c","deliverName","name","Promise","res","setTimeout","Thread","names","sendName","_s2","formRef","formAction","formData","_formRef$current","addOptimisticName","current","reset","optimisticNames","state","newName","text","sending","action","ref","type","placeholder","map","index","_c2","SubmitForm","_s3","setNames","key","sentName","_c3","$RefreshReg$"],"sources":["/Users/niwa_kazuhiro/Documents/PrivateDevelop/win-rate-react19/src/SubmitForm.tsx"],"sourcesContent":["import { useOptimistic, useState, useRef } from \"react\";\nimport { useFormStatus } from \"react-dom\";\n\n///placeHolder付き\nfunction SubmitNamePlaceHolder() {\n    const { pending, data } = useFormStatus();\n    return (\n        <div>\n            <h3>{pending ? \"Submitting...\" : \"Submit\"}</h3>\n            <p>{data ? `Submitting ${data?.get(\"name\")}...` : \"\"}</p>\n        </div>\n    );\n}\n\n// deliverName関数の引数と戻り値の型を定義\n async function deliverName(name: string): Promise<string> {\n  await new Promise((res) => setTimeout(res, 1000));\n  return name;\n}\n\n// Threadコンポーネントのpropsに型を追加\ninterface NameItem {\n  text: string;\n  sending: boolean;\n  key?: number; // key はReact が自動的に生成するので、必須ではない\n}\n\ninterface ThreadProps {\n  names: NameItem[];\n  sendName: (formData: FormData) => Promise<void>;\n}\n\nfunction Thread({ names, sendName }: ThreadProps) {\n  const formRef = useRef<HTMLFormElement | null>(null);\n\n  // formActionの引数の型をFormDataに設定\n  async function formAction(formData: FormData): Promise<void> {\n    addOptimisticName(formData.get(\"name\") as string); // 名前を文字列として扱う\n    formRef.current?.reset();\n    await sendName(formData);\n  }\n\n  // optimisticNamesとaddOptimisticNameに型を付ける\n  const [optimisticNames, addOptimisticName] = useOptimistic<NameItem[], string>(\n    names,\n    (state, newName) => [\n      ...state,\n      {\n        text: newName,\n        sending: true,\n      },\n    ]\n  );\n\n  return (\n    <>\n\n      <form action={formAction} ref={formRef}>\n        <input type=\"text\" name=\"name\" placeholder=\"Your Name!\" />\n        <button type=\"submit\">Submit</button>\n        <SubmitNamePlaceHolder />\n      </form>\n            {optimisticNames.map((name, index) => (\n              <div key={index}>\n                {name.text}\n              </div>\n            ))}\n\n    </>\n  );\n}\n\n// AppコンポーネントのstateとsendName関数の型を追加\nexport  function SubmitForm() {\n  const [names, setNames] = useState<NameItem[]>([\n    { text: \"\", sending: false, key: 1 },\n  ]);\n\n  async function sendName(formData: FormData): Promise<void> {\n    const sentName = await deliverName(formData.get(\"name\") as string);\n    setNames((names) => [...names, { text: sentName, sending: false }]);\n  }\n\n  return (\n      <Thread names={names} sendName={sendName} />\n      );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}